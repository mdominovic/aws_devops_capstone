version: 2.1

orbs:
  # aws-eks: circleci/aws-eks@1.0.3
  # kubernetes: circleci/kubernetes@0.11.2
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

executors:
  python:
    docker:
      - image: circleci/python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  lint:
    executor: python
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build docker image
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t aws-capstone:${CIRCLE_WORKFLOW_ID:0:7} .
            docker run -d --rm --name flaskapp -p 8000:5000 aws-capstone:${CIRCLE_WORKFLOW_ID:0:7}
            docker container ls
      - run:
          name: Test container
          command: |
            export url="http://localhost:8888"
            export response=$(curl -s http://0.0.0.0:8000)
            echo "This is response $response"
            if [[ $response == *"Udacity AWS Cloud Devops Nanodegree Capstone project"* ]]; then
              docker stop flaskapp
            else
              docker stop flaskapp
              exit 1
            fi
      - run:
          name: Push image to docker hub
          command: |
            echo "CIRCLE CI WORKFLOW ID ${CIRCLE_WORKFLOW_ID:0:7}"
            # docker push ${docker_path}:${CIRCLE_WORKFLOW_ID:0:7}
            docker tag aws-capstone:${CIRCLE_WORKFLOW_ID:0:7} miduskas/aws-capstone
            docker push miduskas/aws-capstone

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/aws-capstone

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment

workflows:
  capstone:
    jobs:
      # - lint
      - build
          # requires:
          #   - lint
      - aws-eks/create-cluster:
          cluster-name: eks-demo-deployment-7
          requires: 
            - build
      - create-deployment:
          cluster-name: eks-demo-deployment-7
          requires:
            - aws-eks/create-cluster
      - test-cluster:
          cluster-name: eks-demo-deployment-7
          requires:
            - create-deployment
      # - aws-eks/delete-cluster:
      #    cluster-name: eks-demo-deployment-7
      #    requires:
      #      - test-cluster

# jobs:
#   create-deployment:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           Name of the EKS cluster
#         type: string
#     steps:
#       - checkout
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#       - kubernetes/create-or-update-resource:
#           get-rollout-status: true
#           resource-file-path: .circleci/deploy.yaml
#           resource-name: deployment/nginx-deployment
# orbs:
#   aws-eks: circleci/aws-eks@0.2.3
#   kubernetes: circleci/kubernetes@0.4.0
# version: 2.1
# workflows:
#   deployment:
#     jobs:
#       # - aws-eks/create-cluster:
#       #     cluster-name: eks-demo-deployment-7
#       - create-deployment:
#           cluster-name: eks-demo-deployment-7
#           # requires:
#           #   - aws-eks/create-cluster
#       - aws-eks/update-container-image:
#           cluster-name: eks-demo-deployment-7
#           container-image-updates: 'nginx=nginx:1.9.1'
#           post-steps:
#             - kubernetes/delete-resource:
#                 resource-names: nginx-deployment
#                 resource-types: deployment
#                 wait: true
#           record: true
#           requires:
#             - create-deployment
#           resource-name: deployment/nginx-deployment
#       - aws-eks/delete-cluster:
#           cluster-name: eks-demo-deployment-7
#           requires:
#             - aws-eks/update-container-image
